import { HttpClient } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
interface student{
  id:string,
  name:string,
  email:string
}
@Component({
  selector: 'app-student',
  templateUrl: './student.component.html',
  styleUrls: ['./student.component.css'],

})



export class StudentComponent implements OnInit {
  displayEditform : boolean = false;
  userForm!: FormGroup;
  data:any=null;
  studentForm !: FormGroup ;
/**
 *
 */
constructor(private http:HttpClient,private fb: FormBuilder) {

  this.displayEditform = false;
}



ngOnInit(): void {
  this.ShowListOfStudents();
  this.studentForm = this.fb.group({
    id: [null],  // Optional if you want to bind the ID
    name: ['', [Validators.required, Validators.minLength(3)]],  // Required field, min length 3
    email: ['', [Validators.required, Validators.email]]  // Required field, must be a valid email
  });

  this.userForm = this.fb.group({
    id: [null], // Optional, could be auto-generated by DB
    name: ['', [Validators.required, Validators.minLength(3)]],  // Name is required, min length 3
    email: ['', [Validators.required, Validators.email]]  // Email is required, must be valid
  });
}
//for getting the stundet
GetStudentList():Observable<any>{

  return this.http.get<any>("https://localhost:7077/get/all")

}


deleteStudent(data:student):Observable<any>{


    return this.http.delete("https://localhost:7216/delete/student",{body : data })
}

ShowListOfStudents(){
  this.GetStudentList().subscribe(response=>{
    this.data  = response;
    console.log(this.data);
    
  },(error)=>{
    this.data = error;
  })

 
}

deleteStudentById(data:student){
  this.deleteStudent(data).subscribe(res=>{
      this.ShowListOfStudents();
  },(err)=>{
    
  })
}
//https://localhost:7068/api/create/student

addStudent(data:student){
console.log("the data",data);

  return this.http.post("https://localhost:7068/api/create/student",{
    "id": 0,
    "name": data["name"],
    "email": data["email"]
  },{
    headers:{
      "ContentType" : "application/json"
    },

  })
  
}


AddStudentFromForm(data:student){
  this.addStudent(data).subscribe(res=>{
    this.ShowListOfStudents();
  },(err)=>{
    console.log(err)
  })

}

onSubmit(): void {
  if (this.studentForm?.valid) {

    let studentData :student  = {
      id : "0",
      name:this.studentForm.value["name"],
      email : this.studentForm.value["email"]
    }

    this.AddStudentFromForm(this.studentForm.value);

    console.log(this.studentForm.value,this.studentForm.value["name"]);  // You can replace this with your service call
  } else {
    console.log('Form is not valid');
  }
}

GetStudentByID(id:string):Observable<any>{
   return this.http.get(`https://localhost:7077/get/all/${id}`);
}


UpdateInfoCall(data:student):Observable<any>{
  console.log("updatedata",data);
  
  return this.http.put("https://localhost:7022/update/student",{
    "id": 0,
    "name": data["name"],
    "email": data["email"]
  });
}


EditStudent(id:string){
  this.displayEditform = true;

  this.GetStudentByID(id).subscribe(res=>{
    this.userForm.patchValue({
      name: res.name,
      email: res.email
    });
  },(err)=>{
    console.log(err);
    
  })
 
}




onEdit(): void {
  if (this.userForm.valid) {
    console.log('Form submitted:', this.userForm.value);
this.UpdateInfoCall(this.userForm.value).subscribe(res=>{
      this.ShowListOfStudents();
      this.displayEditform = false;
},(err)=>{
  console.log(err);
  
})
    // Here, you would send the form data to the backend via an API call.
  } else {
    console.log('Form is invalid');
  }
}

}
